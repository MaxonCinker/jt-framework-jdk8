import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenLocal()
        [
                'https://maven.aliyun.com/repository/google',
                'https://maven.aliyun.com/repository/public',
                'https://maven.aliyun.com/repository/gradle-plugin',
                'https://maven.aliyun.com/nexus/content/repositories/jcenter',
                'https://maven.aliyun.com/nexus/content/groups/public/',
                "https://plugins.gradle.org/m2/",
                "https://repo.spring.io/plugins-release",
        ].each { repoUrl ->
            maven { url repoUrl }
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootBomVersion}"
        classpath 'com.github.marcpoppleton:git-changelog:0.1.3'
    }
}

plugins {
    id 'java-library'
}

ext {
    defaultCharset = StandardCharsets.UTF_8.name()
    defaultJavaVersion = JavaVersion.VERSION_11

    thirdParty = [
            oaks                 : ['common-utils': 'io.github.hylexus.oaks:oaks-common-utils:1.0.6'],
            blockingMap          : 'com.github.sarveswaran-m:util.concurrent.blockingMap:0.91',
            google               : [
                    findbugs: [
                            jsr305     : 'com.google.code.findbugs:jsr305:3.0.2',
                            annotations: 'com.google.code.findbugs:annotations:3.0.1'
                    ],
                    guava   : 'com.google.guava:guava:31.1-jre',
            ],
            javax                : ['annotation-api': 'javax.annotation:javax.annotation-api:1.3.2'],
            'hibernate-validator': 'org.hibernate:hibernate-validator:8.0.0.Final',
            apache               : [
                    'commons-collections4': 'org.apache.commons:commons-collections4:4.4'
            ]
    ]
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configure(rootProject) {
    configurations.archives.artifacts.clear()
    apply from: getBuildScriptPath("ide.gradle")
}

configure(allprojects) { project ->
    group = projectGroup
    version = projectVersion
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// 1. java-env config
configure(subprojects.findAll {
    (it.name != "docs") && (it.name != 'samples')
}) { subProject ->
    apply from: getBuildScriptPath("common-java-env-config.gradle")
    apply from: getBuildScriptPath("ide.gradle")
}

// 2. maven config
apply from: getBuildScriptPath("repo-credentials.gradle")

def modulesToPublishToMavenRepo = ["jt-core", "jt-spring", "jt-808-server-support", "jt-808-server-spring-boot-stater"]
configure(subprojects.findAll {
    modulesToPublishToMavenRepo.contains(it.name)
}) { subProject ->
    apply from: getBuildScriptPath("common-maven-config.gradle")
}

// 3. changelog.md
apply from: getBuildScriptPath("change-log-config.gradle")

def getBuildScriptPath(String path) {
    return "${project(":build-script").projectDir}/script/${path}"
}

