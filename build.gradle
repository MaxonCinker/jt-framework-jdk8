import java.nio.charset.StandardCharsets

buildscript {
    repositories {
        mavenLocal()
        [
                'https://maven.aliyun.com/repository/google',
                'https://maven.aliyun.com/repository/public',
                'https://maven.aliyun.com/repository/gradle-plugin',
                'https://maven.aliyun.com/nexus/content/repositories/jcenter',
                'https://maven.aliyun.com/nexus/content/groups/public/',
                "https://plugins.gradle.org/m2/",
                "https://repo.spring.io/plugins-release",
        ].each { repoUrl ->
            maven { url repoUrl }
        }
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${defaultSpringBootBomVersion}"
        classpath 'com.github.marcpoppleton:git-changelog:0.1.3'
    }
}

plugins {
    id 'java-library'
}

ext {
    defaultCharset = StandardCharsets.UTF_8.name()
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

configure(rootProject) {
    configurations.archives.artifacts.clear()
    apply from: getBuildScriptPath("ide.gradle")
}

configure(allprojects) { project ->
    group = projectGroup
    version = projectVersion
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

// 1. java-env config
configure(subprojects.findAll {
    (it.name != "docs") && (it.name != 'samples')
}) { subProject ->
    apply from: getBuildScriptPath("common-java-env-config.gradle")
    apply from: getBuildScriptPath("ide.gradle")
}

// 2. maven config
apply from: getBuildScriptPath("repo-credentials.gradle")

def modulesToPublishToMavenRepo = [
        "jt-core", "jt-spring", "jt-808-server-support",
        "jt-808-server-spring-boot-autoconfigure",
        "jt-808-server-spring-boot-starter-boot2",
        "jt-808-server-spring-boot-starter"
]
configure(subprojects.findAll {
    modulesToPublishToMavenRepo.contains(it.name)
}) { subProject ->
    apply from: getBuildScriptPath("common-maven-config.gradle")
}

// 3. changelog.md
apply from: getBuildScriptPath("change-log-config.gradle")

def getBuildScriptPath(String path) {
    return "${project(":build-script").projectDir}/script/${path}"
}

