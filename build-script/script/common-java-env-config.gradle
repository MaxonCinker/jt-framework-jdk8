apply plugin: 'java-library'

sourceCompatibility = "${defaultJavaVersion}"
targetCompatibility = "${defaultJavaVersion}"

tasks.withType(JavaCompile) {
    options.encoding = "${defaultCharset}"
}

repositories {
    mavenLocal()
    [
            'https://maven.aliyun.com/repository/google',
            'https://maven.aliyun.com/repository/public',
            'https://maven.aliyun.com/repository/gradle-plugin',
            'https://maven.aliyun.com/nexus/content/repositories/jcenter',
            'https://maven.aliyun.com/nexus/content/groups/public/',
            "https://plugins.gradle.org/m2/",
            "https://repo.spring.io/plugins-release",
    ].each { repoUrl ->
        maven { url repoUrl }
    }
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'

    // for test-class
    testAnnotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
}

apply plugin: "io.spring.dependency-management"
dependencyManagement {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
    }
    applyMavenExclusions = false
    generatedPomCustomization {
        enabled = false
    }
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${defaultSpringBootBomVersion}"
    }
}

compileJava {
    sourceCompatibility = "${defaultJavaVersion}"
    targetCompatibility = "${defaultJavaVersion}"
    options.encoding = "${defaultCharset}"
}

javadoc {
    description = "Generates project-level javadoc for use in -javadoc jar"

    options.encoding = "UTF-8"
    options.memberLevel = JavadocMemberLevel.PROTECTED
    options.author = true
    options.header = project.name
    options.use = true
    options.addStringOption("Xdoclint:none", "-quiet")
    options.charSet = 'UTF-8'
    options.addStringOption("charset", "UTF-8")

    options {
        version true
        links "http://docs.oracle.com/javase/8/docs/api"
    }
    // Suppress warnings due to cross-module @see and @link references.
    // Note that global 'api' task does display all warnings.
    logging.captureStandardError LogLevel.INFO
    logging.captureStandardOutput LogLevel.INFO  // suppress "## warnings" message
}

apply plugin: "checkstyle"
checkstyle {
    toolVersion = "8.23"
    getConfigDirectory().set(project(":build-script").file("checkstyle/"))
}

apply plugin: 'idea'

idea {
    module {
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}